Index: src/main/java/module-info.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>module your_package_name.chessgame {\n    requires javafx.controls;\n    requires javafx.fxml;\n            \n        requires org.controlsfx.controls;\n            requires com.dlsc.formsfx;\n                    requires org.kordamp.bootstrapfx.core;\n                requires com.almasb.fxgl.all;\n    \n    opens fr.univamu.iut.s201_chess to javafx.fxml;\n    exports fr.univamu.iut.s201_chess;\n    exports fr.univamu.iut.s201_chess.chessPage;\n    opens fr.univamu.iut.s201_chess.chessPage to javafx.fxml;\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/module-info.java b/src/main/java/module-info.java
--- a/src/main/java/module-info.java	
+++ b/src/main/java/module-info.java	
@@ -1,4 +1,4 @@
-module your_package_name.chessgame {
+module fr.univamu.iut.s201_chess{
     requires javafx.controls;
     requires javafx.fxml;
             
@@ -8,7 +8,6 @@
                 requires com.almasb.fxgl.all;
     
     opens fr.univamu.iut.s201_chess to javafx.fxml;
-    exports fr.univamu.iut.s201_chess;
     exports fr.univamu.iut.s201_chess.chessPage;
     opens fr.univamu.iut.s201_chess.chessPage to javafx.fxml;
 }
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"9801fcea-3a25-4fa0-a050-0ad8fa319eeb\" name=\"Changes\" comment=\"\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/module-info.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/module-info.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/your_package_name/chessgame/ChessGame.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/fr/univamu/iut/s201_chess/ChessGame.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/your_package_name/chessgame/ChessGameController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/fr/univamu/iut/s201_chess/ChessGameController.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/your_package_name/chessgame/HelloApplication.java\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/your_package_name/chessgame/HelloController.java\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/your_package_name/chessgame/Piece.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/fr/univamu/iut/s201_chess/Piece.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/your_package_name/chessgame/PieceColor.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/fr/univamu/iut/s201_chess/PieceColor.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/your_package_name/chessgame/PieceType.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/fr/univamu/iut/s201_chess/PieceType.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/your_package_name/chessgame/Tile.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/fr/univamu/iut/s201_chess/Tile.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/your_package_name/chessgame/ChessGame.fxml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/resources/fr/univamu/iut/s201_chess/ChessGame.fxml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/your_package_name/chessgame/hello-view.fxml\" beforeDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MavenImportPreferences\">\n    <option name=\"generalSettings\">\n      <MavenGeneralSettings>\n        <option name=\"mavenHome\" value=\"Use Maven wrapper\" />\n        <option name=\"useMavenConfig\" value=\"true\" />\n      </MavenGeneralSettings>\n    </option>\n  </component>\n  <component name=\"ProjectId\" id=\"2hMYx0EEma9gYOi9eW6161j75w2\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"autoscrollFromSource\" value=\"true\" />\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\n  <component name=\"RunManager\" selected=\"Application.fr.univamu.iut.s201_chess.chessPage.ChessGame\">\n    <configuration name=\"ChessGame\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"your_package_name.chessgame.ChessGame\" />\n      <module name=\"ChessGame\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"your_package_name.chessgame.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"fr.univamu.iut.s201_chess.chessPage.ChessGame\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"fr.univamu.iut.s201_chess.chessPage.ChessGame\" />\n      <module name=\"ChessGame\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"fr.univamu.iut.s201_chess.chessPage.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.fr.univamu.iut.s201_chess.chessPage.ChessGame\" />\n        <item itemvalue=\"Application.ChessGame\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"9801fcea-3a25-4fa0-a050-0ad8fa319eeb\" name=\"Changes\" comment=\"\" />\n      <created>1717405659376</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1717405659376</updated>\n      <workItem from=\"1717405660479\" duration=\"1000\" />\n      <workItem from=\"1717406665991\" duration=\"307000\" />\n    </task>\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -5,19 +5,9 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="9801fcea-3a25-4fa0-a050-0ad8fa319eeb" name="Changes" comment="">
-      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/fr/univamu/iut/s201_chess/chessPage/Piece.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/fr/univamu/iut/s201_chess/chessPage/Piece.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/module-info.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/module-info.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/your_package_name/chessgame/ChessGame.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/fr/univamu/iut/s201_chess/ChessGame.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/your_package_name/chessgame/ChessGameController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/fr/univamu/iut/s201_chess/ChessGameController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/your_package_name/chessgame/HelloApplication.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/your_package_name/chessgame/HelloController.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/your_package_name/chessgame/Piece.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/fr/univamu/iut/s201_chess/Piece.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/your_package_name/chessgame/PieceColor.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/fr/univamu/iut/s201_chess/PieceColor.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/your_package_name/chessgame/PieceType.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/fr/univamu/iut/s201_chess/PieceType.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/your_package_name/chessgame/Tile.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/fr/univamu/iut/s201_chess/Tile.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/your_package_name/chessgame/ChessGame.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/fr/univamu/iut/s201_chess/ChessGame.fxml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/your_package_name/chessgame/hello-view.fxml" beforeDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -101,9 +91,21 @@
       <workItem from="1717405660479" duration="1000" />
       <workItem from="1717406665991" duration="307000" />
     </task>
+    <task id="LOCAL-00001" summary="merge">
+      <created>1717508794474</created>
+      <option name="number" value="00001" />
+      <option name="presentableId" value="LOCAL-00001" />
+      <option name="project" value="LOCAL" />
+      <updated>1717508794474</updated>
+    </task>
+    <option name="localTasksCounter" value="2" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
     <option name="version" value="3" />
   </component>
+  <component name="VcsManagerConfiguration">
+    <MESSAGE value="merge" />
+    <option name="LAST_COMMIT_MESSAGE" value="merge" />
+  </component>
 </project>
\ No newline at end of file
Index: src/main/java/fr/univamu/iut/s201_chess/chessPage/Piece.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package fr.univamu.iut.s201_chess.chessPage;\n\nimport javafx.scene.image.Image;\nimport javafx.scene.image.ImageView;\nimport javafx.scene.layout.StackPane;\nimport javafx.scene.paint.Color;\nimport javafx.scene.shape.Ellipse;\nimport javafx.scene.text.Text;\n\npublic class Piece extends StackPane {\n    private PieceType type;\n    private PieceColor color;\n    private double mouseX, mouseY;\n    private double oldX, oldY;\n    private Tile tile;\n\n    public Piece(PieceType type, PieceColor color, int x, int y) {\n        this.type = type;\n        this.color = color;\n\n        ImageView img = new ImageView();\n\n\n\n\n        if(color == PieceColor.BLACK){\n\n            switch (type){\n\n                case KING -> img.setImage(new Image(getClass().getResourceAsStream(\"/img/blackPieces/bk.png\")));\n                case PAWN -> img.setImage(new Image(getClass().getResourceAsStream(\"/img/blackPieces/bp.png\")));\n                case ROOK -> img.setImage(new Image(getClass().getResourceAsStream(\"/img/blackPieces/br.png\")));\n                case QUEEN -> img.setImage(new Image(getClass().getResourceAsStream(\"/img/blackPieces/bq.png\")));\n                case BISHOP -> img.setImage(new Image(getClass().getResourceAsStream(\"/img/blackPieces/bb.png\")));\n                case KNIGHT -> img.setImage(new Image(getClass().getResourceAsStream(\"/img/blackPieces/bn.png\")));\n\n            }\n        }\n        else if(color == PieceColor.WHITE){\n            switch (type){\n                case KING -> img.setImage(new Image(getClass().getResourceAsStream(\"/img/whitePieces/wk.png\")));\n                case PAWN -> img.setImage(new Image(getClass().getResourceAsStream(\"/img/whitePieces/wp.png\")));\n                case ROOK -> img.setImage(new Image(getClass().getResourceAsStream(\"/img/whitePieces/wr.png\")));\n                case QUEEN -> img.setImage(new Image(getClass().getResourceAsStream(\"/img/whitePieces/wq.png\")));\n                case BISHOP -> img.setImage(new Image(getClass().getResourceAsStream(\"/img/whitePieces/wb.png\")));\n                case KNIGHT -> img.setImage(new Image(getClass().getResourceAsStream(\"/img/whitePieces/wn.png\")));\n            }\n        }\n\n        img.setFitHeight(85);\n        img.setFitWidth(85);\n        initMove(x, y);// Utilisation de la méthode initMove pour initialiser la position\n        move(x, y);\n\n\n        //Ellipse bg = new Ellipse(ChessGame.TILE_SIZE * 0.3125, ChessGame.TILE_SIZE * 0.26);\n        //bg.setFill(color == PieceColor.WHITE ? Color.WHITE : Color.BLACK);\n        //bg.setStroke(Color.BLACK);\n        //bg.setStrokeWidth(ChessGame.TILE_SIZE * 0.03);\n\n        //bg.setTranslateX((ChessGame.TILE_SIZE - ChessGame.TILE_SIZE * 0.3125 * 2) / 2);\n        //bg.setTranslateY((ChessGame.TILE_SIZE - ChessGame.TILE_SIZE * 0.26 * 2) / 2);\n\n        Text text = new Text(type.toString().substring(0, 1));\n        text.setFill(color == PieceColor.WHITE ? Color.BLACK : Color.WHITE);\n        text.setTranslateX((ChessGame.TILE_SIZE - ChessGame.TILE_SIZE * 0.3125 * 2) / 2);\n        text.setTranslateY((ChessGame.TILE_SIZE - ChessGame.TILE_SIZE * 0.26 * 2) / 2);\n\n        ImageView img = new ImageView();\n        img.setImage(new Image(getClass().getResourceAsStream(\"/img/blackPieces/bb.png\")));\n\n\n\n\n        getChildren().add(img);\n\n        setOnMousePressed(e -> {\n            mouseX = e.getSceneX();\n            mouseY = e.getSceneY();\n        });\n\n        setOnMouseDragged(e -> {\n            relocate(e.getSceneX() - mouseX + oldX, e.getSceneY() - mouseY + oldY);\n        });\n    }\n\n    // Méthode utilisée uniquement lors de l'initialisation\n    private void initMove(int x, int y) {\n        oldX = x * ChessGame.TILE_SIZE;\n        oldY = y * ChessGame.TILE_SIZE;\n        relocate(oldX, oldY);\n    }\n\n    public void move(int x, int y, Tile[][] board, Group pieceGroup) {\n        int oldTileX = (int) (oldX / ChessGame.TILE_SIZE);\n        int oldTileY = (int) (oldY / ChessGame.TILE_SIZE);\n\n        oldX = x * ChessGame.TILE_SIZE;\n        oldY = y * ChessGame.TILE_SIZE;\n\n        // Capture logic\n        Tile targetTile = board[x][y];\n        if (targetTile.hasPiece() && targetTile.getPiece().getColor() != this.color) {\n            Piece capturedPiece = targetTile.getPiece();\n            pieceGroup.getChildren().remove(capturedPiece);\n        }\n\n        // Update board positions\n        board[oldTileX][oldTileY].setPiece(null);\n        board[x][y].setPiece(this);\n\n        relocate(oldX, oldY);\n    }\n\n    public void abortMove() {\n        relocate(oldX, oldY);\n    }\n\n    public PieceType getType() {\n        return type;\n    }\n\n    public PieceColor getColor() {\n        return color;\n    }\n\n    public Tile getTile() {\n        return tile;\n    }\n\n    public void setTile(Tile tile) {\n        this.tile = tile;\n    }\n\n    public boolean isValidMove(int newX, int newY, Tile[][] board) {\n        switch (type) {\n            case PAWN:\n                return isValidPawnMove(newX, newY, board);\n            case ROOK:\n                return isValidRookMove(newX, newY, board);\n            case KNIGHT:\n                return isValidKnightMove(newX, newY, board);\n            case BISHOP:\n                return isValidBishopMove(newX, newY, board);\n            case QUEEN:\n                return isValidQueenMove(newX, newY, board);\n            case KING:\n                return isValidKingMove(newX, newY, board);\n            default:\n                return false;\n        }\n    }\n\n    private boolean isValidPawnMove(int newX, int newY, Tile[][] board) {\n        int currentX = (int) (oldX / ChessGame.TILE_SIZE);\n        int currentY = (int) (oldY / ChessGame.TILE_SIZE);\n        int deltaY = newY - currentY;\n        int deltaX = newX - currentX;\n\n        if (color == PieceColor.WHITE) {\n            // White pawns move up the board (decrease in Y)\n            if (deltaX == 0) {\n                // Moving forward\n                if (deltaY == -1 && !board[newX][newY].hasPiece()) {\n                    return true;\n                } else if (currentY == 6 && deltaY == -2 && !board[newX][newY].hasPiece() && !board[newX][newY + 1].hasPiece()) {\n                    return true;\n                }\n            } else if (Math.abs(deltaX) == 1 && deltaY == -1 && board[newX][newY].hasPiece() && board[newX][newY].getPiece().getColor() != this.color) {\n                // Capturing diagonally\n                return true;\n            }\n        } else if (color == PieceColor.BLACK) {\n            // Black pawns move down the board (increase in Y)\n            if (deltaX == 0) {\n                // Moving forward\n                if (deltaY == 1 && !board[newX][newY].hasPiece()) {\n                    return true;\n                } else if (currentY == 1 && deltaY == 2 && !board[newX][newY].hasPiece() && !board[newX][newY - 1].hasPiece()) {\n                    return true;\n                }\n            } else if (Math.abs(deltaX) == 1 && deltaY == 1 && board[newX][newY].hasPiece() && board[newX][newY].getPiece().getColor() != this.color) {\n                // Capturing diagonally\n                return true;\n            }\n        }\n\n        return false;\n    }\n    private boolean isValidRookMove(int newX, int newY, Tile[][] board) {\n        int currentX = (int) (oldX / ChessGame.TILE_SIZE);\n        int currentY = (int) (oldY / ChessGame.TILE_SIZE);\n\n        // Rook moves in straight lines only\n        if (currentX != newX && currentY != newY) {\n            return false;\n        }\n\n        // Check path for any pieces\n        if (currentX == newX) {\n            // Vertical move\n            int step = (newY > currentY) ? 1 : -1;\n            for (int y = currentY + step; y != newY; y += step) {\n                if (board[currentX][y].hasPiece()) {\n                    return false;\n                }\n            }\n        } else if (currentY == newY) {\n            // Horizontal move\n            int step = (newX > currentX) ? 1 : -1;\n            for (int x = currentX + step; x != newX; x += step) {\n                if (board[x][currentY].hasPiece()) {\n                    return false;\n                }\n            }\n        }\n\n        // Destination must be empty or occupied by an enemy piece\n        Tile targetTile = board[newX][newY];\n        if (targetTile.hasPiece() && targetTile.getPiece().getColor() == this.color) {\n            return false;\n        }\n\n        return true;\n    }\n\n\n    private boolean isValidKnightMove(int newX, int newY, Tile[][] board) {\n        int currentX = (int) (oldX / ChessGame.TILE_SIZE);\n        int currentY = (int) (oldY / ChessGame.TILE_SIZE);\n\n        int deltaX = Math.abs(newX - currentX);\n        int deltaY = Math.abs(newY - currentY);\n\n        // Knights move in an L-shape: 2 by 1 or 1 by 2\n        if ((deltaX == 2 && deltaY == 1) || (deltaX == 1 && deltaY == 2)) {\n            // Destination must be empty or occupied by an enemy piece\n            Tile targetTile = board[newX][newY];\n            if (!targetTile.hasPiece() || targetTile.getPiece().getColor() != this.color) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n\n    private boolean isValidBishopMove(int newX, int newY, Tile[][] board) {\n        int currentX = (int) (oldX / ChessGame.TILE_SIZE);\n        int currentY = (int) (oldY / ChessGame.TILE_SIZE);\n\n        int deltaX = Math.abs(newX - currentX);\n        int deltaY = Math.abs(newY - currentY);\n\n        // Bishops move diagonally, so deltaX must equal deltaY\n        if (deltaX != deltaY) {\n            return false;\n        }\n\n        // Check path for any pieces\n        int stepX = (newX > currentX) ? 1 : -1;\n        int stepY = (newY > currentY) ? 1 : -1;\n        int x = currentX + stepX;\n        int y = currentY + stepY;\n\n        while (x != newX && y != newY) {\n            if (board[x][y].hasPiece()) {\n                return false;\n            }\n            x += stepX;\n            y += stepY;\n        }\n\n        // Destination must be empty or occupied by an enemy piece\n        Tile targetTile = board[newX][newY];\n        if (targetTile.hasPiece() && targetTile.getPiece().getColor() == this.color) {\n            return false;\n        }\n\n        return true;\n    }\n\n\n    private boolean isValidQueenMove(int newX, int newY, Tile[][] board) {\n        int currentX = (int) (oldX / ChessGame.TILE_SIZE);\n        int currentY = (int) (oldY / ChessGame.TILE_SIZE);\n\n        int deltaX = Math.abs(newX - currentX);\n        int deltaY = Math.abs(newY - currentY);\n\n        // Check if it's a valid rook move or a valid bishop move\n        return isValidRookMove(newX, newY, board) || isValidBishopMove(newX, newY, board);\n    }\n\n\n    private boolean isValidKingMove(int newX, int newY, Tile[][] board) {\n        int currentX = (int) (oldX / ChessGame.TILE_SIZE);\n        int currentY = (int) (oldY / ChessGame.TILE_SIZE);\n\n        int deltaX = Math.abs(newX - currentX);\n        int deltaY = Math.abs(newY - currentY);\n\n        // King moves only one square in any direction\n        if (deltaX <= 1 && deltaY <= 1) {\n            // Destination must be empty or occupied by an enemy piece\n            Tile targetTile = board[newX][newY];\n            if (!targetTile.hasPiece() || targetTile.getPiece().getColor() != this.color) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n}\n
===================================================================
diff --git a/src/main/java/fr/univamu/iut/s201_chess/chessPage/Piece.java b/src/main/java/fr/univamu/iut/s201_chess/chessPage/Piece.java
--- a/src/main/java/fr/univamu/iut/s201_chess/chessPage/Piece.java	
+++ b/src/main/java/fr/univamu/iut/s201_chess/chessPage/Piece.java	
@@ -6,6 +6,7 @@
 import javafx.scene.paint.Color;
 import javafx.scene.shape.Ellipse;
 import javafx.scene.text.Text;
+import javafx.scene.Group;
 
 public class Piece extends StackPane {
     private PieceType type;
